---

sql_exporter_version: 0.4

sql_exporter_download_url: "https://github.com/free/sql_exporter/releases/download/{{ sql_exporter_version }}/{{ sql_exporter_archive_name }}"
sql_exporter_archive_name: "{{ sql_exporter_extracted_dir }}.tar.gz"
sql_exporter_extracted_dir: "sql_exporter-{{ sql_exporter_version }}.linux-{{ go_arch_map[ansible_architecture] | default(ansible_architecture) }}"

sql_exporter_force_install: false

sql_exporter_user: sql-exp
sql_exporter_group: "{{ sql_exporter_user }}"

sql_exporter_root_dir: /opt/sql_exporter
sql_exporter_release_dir: "{{ sql_exporter_root_dir }}/current"

sql_exporter_web_listen_address: "0.0.0.0:9399"

sql_exporter_config_global:
  # Global settings and defaults.
  global:
    # Subtracted from Prometheus' scrape_timeout to give us some headroom and prevent Prometheus from
    # timing out first.
    scrape_timeout_offset: 500ms
    # Minimum interval between collector runs: by default (0s) collectors are executed on every scrape.
    min_interval: 0s
    # Maximum number of open connections to any one target. Metric queries will run concurrently on
    # multiple connections.
    max_connections: 3
    # Maximum number of idle connections to any one target.
    max_idle_connections: 3

sql_exporter_config_target:
  # The target to monitor and the list of collectors to execute on it.
  target:
    # Data source name always has a URI schema that matches the driver name. In some cases (e.g. MySQL)
    # the schema gets dropped or replaced to match the driver expected DSN format.
    data_source_name: 'sqlserver://prom_user:prom_password@dbserver1.example.com:1433'

    # Collectors (referenced by name) to execute on the target.
    collectors: [mssql_standard]

sql_exporter_config_collectors:
  # Collectors (referenced by name) to execute on the target.
  collectors:
    - collector_name: mssql_standard
      metrics:
        # The metric name, type and help text, as exported to /metrics.
        - metric_name: mssql_log_growths
          # This is a Prometheus counter (monotonically increasing value).
          type: counter
          help: 'Total number of times the transaction log has been expanded since last restart, per database.'
          # Optional set of labels derived from key columns.
          key_labels:
            # Populated from the `db` column of each row.
            - db
          # This query returns exactly one value per row, in the `counter` column.
          values: [counter]
          query: |
            SELECT rtrim(instance_name) AS db, cntr_value AS counter
            FROM sys.dm_os_performance_counters
            WHERE counter_name = 'Log Growths' AND instance_name <> '_Total'
        # A different metric, with multiple values produced from each result row.
        - metric_name: mssql_io_stall_seconds
          type: counter
          help: 'Stall time in seconds per database and I/O operation.'
          key_labels:
            # Populated from the `db` column of the result.
            - db
          # Label populated with the value column name, configured via `values` (e.g. `operation="io_stall_read_ms"`).
          #
          # Required when multiple value columns are configured.
          value_label: operation
          # Multiple value columns: their name is recorded in the label defined by `attrubute_label` (e.g.
          # `operation="io_stall_read_ms"`).
          values:
            - io_stall_read
            - io_stall_write
          query_ref: io_stall

        # Another metric, uses same named query (referenced through query_ref) as mssql_io_stall_seconds.
        - metric_name: mssql_io_stall_total_seconds
          type: counter
          help: 'Total stall time in seconds per database.'
          key_labels:
            # Populated from the `db` column of the result.
            - db
          # Only one value, populated from the `io_stall` column.
          values:
            - io_stall
          query_ref: io_stall

      # Named queries, referenced by one or more metrics, through query_ref.
      queries:
        # Populates `mssql_io_stall` and `mssql_io_stall_total`
        - query_name: io_stall
          query: |
            SELECT
              cast(DB_Name(a.database_id) as varchar) AS db,
              sum(io_stall_read_ms) / 1000.0 AS io_stall_read,
              sum(io_stall_write_ms) / 1000.0 AS io_stall_write,
              sum(io_stall) / 1000.0 AS io_stall
            FROM
              sys.dm_io_virtual_file_stats(null, null) a
            INNER JOIN sys.master_files b ON a.database_id = b.database_id AND a.file_id = b.file_id
            GROUP BY a.database_id
